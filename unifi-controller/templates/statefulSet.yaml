apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}
spec:
  serviceName: {{ .Release.Name }}-http
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      containers:
      - name: {{ .Release.Name }}
        image: lscr.io/linuxserver/unifi-network-application:latest
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: DK
        - name: MONGO_USER
          value: root
        - name: MONGO_PASS
          valueFrom:
            secretKeyRef:
              {{- if .Values.secret.existingkey.enabled }}
              name: {{ .Values.secret.existingkey.name }}
              {{- else }}
              name: {{ .Release.Name }}-mongo-db
              {{- end }}
              key: mongo-initdb-root-password
        - name: MONGO_HOST
          value: {{ .Release.Name }}-mongo-db
        - name: MONGO_PORT
          value: "27017"
        - name: MONGO_DBNAME
          value: unifi
        - name: MONGO_AUTHSOURCE
          value: admin
        volumeMounts:
        - name: data
          mountPath: /var/lib/unifi
        - name: config
          mountPath: /config
      initContainers:
        - name: init-permissions
          image: busybox:latest
          command:
            - sh
            - "-c"
            - |
              chown 1000:1000 /var/lib/unifi
              chmod 755 /var/lib/unifi
              chown 1000:1000 /config
              chmod 755 /config
          volumeMounts:
          - name: data
            mountPath: /var/lib/unifi
          - name: config
            mountPath: /config
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-config
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-data
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-mongo-db
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}-mongo-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-mongo-db
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-mongo-db
    spec:
      containers:
      - name: mongo-db
        image: mongo:4.4.0
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: root
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              {{- if .Values.secret.existingkey.enabled }}
              name: {{ .Values.secret.existingkey.name }}
              {{- else }}
              name: {{ .Release.Name }}-mongo-db
              {{- end }}
              key: mongo-initdb-root-password
        - name: MONGO_USER
          value: unifi
        - name: MONGO_PASS
          valueFrom:
            secretKeyRef:
              {{- if .Values.secret.existingkey.enabled }}
              name: {{ .Values.secret.existingkey.name }}
              {{- else }}
              name: {{ .Release.Name }}-mongo-db
              {{- end }}
              key: mongo-pass
        - name: MONGO_DBNAME
          value: unifi
        - name: MONGO_AUTHSOURCE
          value: admin
        volumeMounts:
        - name: data
          mountPath: /data/db
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d/init-mongo.sh:ro
          subPath: init-mongo.sh
        securityContext:
          runAsUser: 1001
          runAsGroup: 1001
      securityContext:
        fsGroup: 1001
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-mongo-db-data
      - name: init-script
        configMap:
          name: mongo-init-script











          apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}
spec:
  serviceName: {{ .Release.Name }}-http
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      containers:
      - name: {{ .Release.Name }}
        image: lscr.io/linuxserver/unifi-network-application:latest
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: DK
        - name: MONGO_USER
          value: root
        - name: MONGO_PASS
          valueFrom:
            secretKeyRef:
              {{- if .Values.secret.existingkey.enabled }}
              name: {{ .Values.secret.existingkey.name }}
              {{- else }}
              name: {{ .Release.Name }}-mongo-db
              {{- end }}
              key: mongo-initdb-root-password
        - name: MONGO_HOST
          value: mongo-db
        - name: MONGO_PORT
          value: "27017"
        - name: MONGO_DBNAME
          value: unifi
        - name: MONGO_AUTHSOURCE
          value: admin
        volumeMounts:
        - name: data
          mountPath: /var/lib/unifi
        - name: config
          mountPath: /config
      initContainers:
        - name: init-permissions
          image: busybox:latest
          command:
            - sh
            - "-c"
            - |
              chown 1000:1000 /var/lib/unifi
              chmod 755 /var/lib/unifi
              chown 1000:1000 /config
              chmod 755 /config
          volumeMounts:
          - name: data
            mountPath: /var/lib/unifi
          - name: config
            mountPath: /config
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-config
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-data
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-mongo-db
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}-mongo-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-mongo-db
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-mongo-db
    spec:
      containers:
      - name: mongo-db
        image: mongo:4.4.0
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: root
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              {{- if .Values.secret.existingkey.enabled }}
              name: {{ .Values.secret.existingkey.name }}
              {{- else }}
              name: {{ .Release.Name }}-mongo-db
              {{- end }}
              key: mongo-initdb-root-password
        - name: MONGO_USER
          value: unifi
        - name: MONGO_PASS
          valueFrom:
            secretKeyRef:
              {{- if .Values.secret.existingkey.enabled }}
              name: {{ .Values.secret.existingkey.name }}
              {{- else }}
              name: {{ .Release.Name }}-mongo-db
              {{- end }}
              key: mongo-pass
        - name: MONGO_DBNAME
          value: unifi
        - name: MONGO_AUTHSOURCE
          value: admin
        volumeMounts:
        - name: data
          mountPath: /data/db
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d/init-mongo.sh:ro
          subPath: init-mongo.sh
        securityContext:
          runAsUser: 1001
          runAsGroup: 1001
      securityContext:
        fsGroup: 1001
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: mongo-db-data
      - name: init-script
        configMap:
          name: mongo-init-script